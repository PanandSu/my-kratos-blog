// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.0
// source: api/photo/photo.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Photo_CreatePhoto_FullMethodName = "/api.Photo/CreatePhoto"
	Photo_DeletePhoto_FullMethodName = "/api.Photo/DeletePhoto"
	Photo_ListPhoto_FullMethodName   = "/api.Photo/ListPhoto"
)

// PhotoClient is the client API for Photo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PhotoClient interface {
	CreatePhoto(ctx context.Context, in *CreatePhotoRequest, opts ...grpc.CallOption) (*CreatePhotoReply, error)
	DeletePhoto(ctx context.Context, in *DeletePhotoRequest, opts ...grpc.CallOption) (*DeletePhotoReply, error)
	ListPhoto(ctx context.Context, in *ListPhotoRequest, opts ...grpc.CallOption) (*ListPhotoReply, error)
}

type photoClient struct {
	cc grpc.ClientConnInterface
}

func NewPhotoClient(cc grpc.ClientConnInterface) PhotoClient {
	return &photoClient{cc}
}

func (c *photoClient) CreatePhoto(ctx context.Context, in *CreatePhotoRequest, opts ...grpc.CallOption) (*CreatePhotoReply, error) {
	out := new(CreatePhotoReply)
	err := c.cc.Invoke(ctx, Photo_CreatePhoto_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photoClient) DeletePhoto(ctx context.Context, in *DeletePhotoRequest, opts ...grpc.CallOption) (*DeletePhotoReply, error) {
	out := new(DeletePhotoReply)
	err := c.cc.Invoke(ctx, Photo_DeletePhoto_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photoClient) ListPhoto(ctx context.Context, in *ListPhotoRequest, opts ...grpc.CallOption) (*ListPhotoReply, error) {
	out := new(ListPhotoReply)
	err := c.cc.Invoke(ctx, Photo_ListPhoto_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PhotoServer is the server API for Photo service.
// All implementations must embed UnimplementedPhotoServer
// for forward compatibility
type PhotoServer interface {
	CreatePhoto(context.Context, *CreatePhotoRequest) (*CreatePhotoReply, error)
	DeletePhoto(context.Context, *DeletePhotoRequest) (*DeletePhotoReply, error)
	ListPhoto(context.Context, *ListPhotoRequest) (*ListPhotoReply, error)
	mustEmbedUnimplementedPhotoServer()
}

// UnimplementedPhotoServer must be embedded to have forward compatible implementations.
type UnimplementedPhotoServer struct {
}

func (UnimplementedPhotoServer) CreatePhoto(context.Context, *CreatePhotoRequest) (*CreatePhotoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePhoto not implemented")
}
func (UnimplementedPhotoServer) DeletePhoto(context.Context, *DeletePhotoRequest) (*DeletePhotoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePhoto not implemented")
}
func (UnimplementedPhotoServer) ListPhoto(context.Context, *ListPhotoRequest) (*ListPhotoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPhoto not implemented")
}
func (UnimplementedPhotoServer) mustEmbedUnimplementedPhotoServer() {}

// UnsafePhotoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PhotoServer will
// result in compilation errors.
type UnsafePhotoServer interface {
	mustEmbedUnimplementedPhotoServer()
}

func RegisterPhotoServer(s grpc.ServiceRegistrar, srv PhotoServer) {
	s.RegisterService(&Photo_ServiceDesc, srv)
}

func _Photo_CreatePhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePhotoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoServer).CreatePhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Photo_CreatePhoto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoServer).CreatePhoto(ctx, req.(*CreatePhotoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Photo_DeletePhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePhotoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoServer).DeletePhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Photo_DeletePhoto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoServer).DeletePhoto(ctx, req.(*DeletePhotoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Photo_ListPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPhotoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoServer).ListPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Photo_ListPhoto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoServer).ListPhoto(ctx, req.(*ListPhotoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Photo_ServiceDesc is the grpc.ServiceDesc for Photo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Photo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Photo",
	HandlerType: (*PhotoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePhoto",
			Handler:    _Photo_CreatePhoto_Handler,
		},
		{
			MethodName: "DeletePhoto",
			Handler:    _Photo_DeletePhoto_Handler,
		},
		{
			MethodName: "ListPhoto",
			Handler:    _Photo_ListPhoto_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/photo/photo.proto",
}
