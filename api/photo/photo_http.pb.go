// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v5.26.0
// source: api/photo/photo.proto

package api

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationPhotoCreatePhoto = "/api.Photo/CreatePhoto"
const OperationPhotoDeletePhoto = "/api.Photo/DeletePhoto"
const OperationPhotoListPhoto = "/api.Photo/ListPhoto"

type PhotoHTTPServer interface {
	CreatePhoto(context.Context, *CreatePhotoRequest) (*CreatePhotoReply, error)
	DeletePhoto(context.Context, *DeletePhotoRequest) (*DeletePhotoReply, error)
	ListPhoto(context.Context, *ListPhotoRequest) (*ListPhotoReply, error)
}

func RegisterPhotoHTTPServer(s *http.Server, srv PhotoHTTPServer) {
	r := s.Route("/")
	r.POST("/api/addPhoto", _Photo_CreatePhoto0_HTTP_Handler(srv))
	r.DELETE("/api/deletePhoto/{id}", _Photo_DeletePhoto0_HTTP_Handler(srv))
	r.GET("/api/getAllPhoto", _Photo_ListPhoto0_HTTP_Handler(srv))
}

func _Photo_CreatePhoto0_HTTP_Handler(srv PhotoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreatePhotoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPhotoCreatePhoto)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreatePhoto(ctx, req.(*CreatePhotoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreatePhotoReply)
		return ctx.Result(200, reply)
	}
}

func _Photo_DeletePhoto0_HTTP_Handler(srv PhotoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeletePhotoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPhotoDeletePhoto)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeletePhoto(ctx, req.(*DeletePhotoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeletePhotoReply)
		return ctx.Result(200, reply)
	}
}

func _Photo_ListPhoto0_HTTP_Handler(srv PhotoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListPhotoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPhotoListPhoto)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListPhoto(ctx, req.(*ListPhotoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListPhotoReply)
		return ctx.Result(200, reply)
	}
}

type PhotoHTTPClient interface {
	CreatePhoto(ctx context.Context, req *CreatePhotoRequest, opts ...http.CallOption) (rsp *CreatePhotoReply, err error)
	DeletePhoto(ctx context.Context, req *DeletePhotoRequest, opts ...http.CallOption) (rsp *DeletePhotoReply, err error)
	ListPhoto(ctx context.Context, req *ListPhotoRequest, opts ...http.CallOption) (rsp *ListPhotoReply, err error)
}

type PhotoHTTPClientImpl struct {
	cc *http.Client
}

func NewPhotoHTTPClient(client *http.Client) PhotoHTTPClient {
	return &PhotoHTTPClientImpl{client}
}

func (c *PhotoHTTPClientImpl) CreatePhoto(ctx context.Context, in *CreatePhotoRequest, opts ...http.CallOption) (*CreatePhotoReply, error) {
	var out CreatePhotoReply
	pattern := "/api/addPhoto"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPhotoCreatePhoto))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PhotoHTTPClientImpl) DeletePhoto(ctx context.Context, in *DeletePhotoRequest, opts ...http.CallOption) (*DeletePhotoReply, error) {
	var out DeletePhotoReply
	pattern := "/api/deletePhoto/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPhotoDeletePhoto))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PhotoHTTPClientImpl) ListPhoto(ctx context.Context, in *ListPhotoRequest, opts ...http.CallOption) (*ListPhotoReply, error) {
	var out ListPhotoReply
	pattern := "/api/getAllPhoto"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPhotoListPhoto))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
